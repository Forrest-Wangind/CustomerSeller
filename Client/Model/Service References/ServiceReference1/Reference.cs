//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace CustomerSeller.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Model")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime entryTimeEndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime entryTimeStartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string genderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] permissionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime entryTimeEnd {
            get {
                return this.entryTimeEndField;
            }
            set {
                if ((this.entryTimeEndField.Equals(value) != true)) {
                    this.entryTimeEndField = value;
                    this.RaisePropertyChanged("entryTimeEnd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime entryTimeStart {
            get {
                return this.entryTimeStartField;
            }
            set {
                if ((this.entryTimeStartField.Equals(value) != true)) {
                    this.entryTimeStartField = value;
                    this.RaisePropertyChanged("entryTimeStart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string gender {
            get {
                return this.genderField;
            }
            set {
                if ((object.ReferenceEquals(this.genderField, value) != true)) {
                    this.genderField = value;
                    this.RaisePropertyChanged("gender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] permissions {
            get {
                return this.permissionsField;
            }
            set {
                if ((object.ReferenceEquals(this.permissionsField, value) != true)) {
                    this.permissionsField = value;
                    this.RaisePropertyChanged("permissions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userID {
            get {
                return this.userIDField;
            }
            set {
                if ((object.ReferenceEquals(this.userIDField, value) != true)) {
                    this.userIDField = value;
                    this.RaisePropertyChanged("userID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                if ((object.ReferenceEquals(this.userNameField, value) != true)) {
                    this.userNameField = value;
                    this.RaisePropertyChanged("userName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCustomer", ReplyAction="http://tempuri.org/IService1/GetCustomerResponse")]
        System.Data.DataSet GetCustomer(int PageSize, int CurrentPage, System.Collections.Generic.KeyValuePair<string, string>[] Parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCustomer", ReplyAction="http://tempuri.org/IService1/GetCustomerResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCustomerAsync(int PageSize, int CurrentPage, System.Collections.Generic.KeyValuePair<string, string>[] Parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCustomerDetail", ReplyAction="http://tempuri.org/IService1/GetCustomerDetailResponse")]
        System.Data.DataSet GetCustomerDetail(string CustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCustomerDetail", ReplyAction="http://tempuri.org/IService1/GetCustomerDetailResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCustomerDetailAsync(string CustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateCustomerDetail", ReplyAction="http://tempuri.org/IService1/UpdateCustomerDetailResponse")]
        int UpdateCustomerDetail(string sql);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateCustomerDetail", ReplyAction="http://tempuri.org/IService1/UpdateCustomerDetailResponse")]
        System.Threading.Tasks.Task<int> UpdateCustomerDetailAsync(string sql);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserPermissions", ReplyAction="http://tempuri.org/IService1/GetUserPermissionsResponse")]
        string[] GetUserPermissions(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserPermissions", ReplyAction="http://tempuri.org/IService1/GetUserPermissionsResponse")]
        System.Threading.Tasks.Task<string[]> GetUserPermissionsAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUsers", ReplyAction="http://tempuri.org/IService1/GetUsersResponse")]
        System.Data.DataSet GetUsers(CustomerSeller.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUsers", ReplyAction="http://tempuri.org/IService1/GetUsersResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetUsersAsync(CustomerSeller.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSingleUser", ReplyAction="http://tempuri.org/IService1/GetSingleUserResponse")]
        CustomerSeller.ServiceReference1.User GetSingleUser(CustomerSeller.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSingleUser", ReplyAction="http://tempuri.org/IService1/GetSingleUserResponse")]
        System.Threading.Tasks.Task<CustomerSeller.ServiceReference1.User> GetSingleUserAsync(CustomerSeller.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/test", ReplyAction="http://tempuri.org/IService1/testResponse")]
        int test(int a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/test", ReplyAction="http://tempuri.org/IService1/testResponse")]
        System.Threading.Tasks.Task<int> testAsync(int a);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : CustomerSeller.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<CustomerSeller.ServiceReference1.IService1>, CustomerSeller.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet GetCustomer(int PageSize, int CurrentPage, System.Collections.Generic.KeyValuePair<string, string>[] Parameters) {
            return base.Channel.GetCustomer(PageSize, CurrentPage, Parameters);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCustomerAsync(int PageSize, int CurrentPage, System.Collections.Generic.KeyValuePair<string, string>[] Parameters) {
            return base.Channel.GetCustomerAsync(PageSize, CurrentPage, Parameters);
        }
        
        public System.Data.DataSet GetCustomerDetail(string CustomerID) {
            return base.Channel.GetCustomerDetail(CustomerID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCustomerDetailAsync(string CustomerID) {
            return base.Channel.GetCustomerDetailAsync(CustomerID);
        }
        
        public int UpdateCustomerDetail(string sql) {
            return base.Channel.UpdateCustomerDetail(sql);
        }
        
        public System.Threading.Tasks.Task<int> UpdateCustomerDetailAsync(string sql) {
            return base.Channel.UpdateCustomerDetailAsync(sql);
        }
        
        public string[] GetUserPermissions(string userId) {
            return base.Channel.GetUserPermissions(userId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetUserPermissionsAsync(string userId) {
            return base.Channel.GetUserPermissionsAsync(userId);
        }
        
        public System.Data.DataSet GetUsers(CustomerSeller.ServiceReference1.User user) {
            return base.Channel.GetUsers(user);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetUsersAsync(CustomerSeller.ServiceReference1.User user) {
            return base.Channel.GetUsersAsync(user);
        }
        
        public CustomerSeller.ServiceReference1.User GetSingleUser(CustomerSeller.ServiceReference1.User user) {
            return base.Channel.GetSingleUser(user);
        }
        
        public System.Threading.Tasks.Task<CustomerSeller.ServiceReference1.User> GetSingleUserAsync(CustomerSeller.ServiceReference1.User user) {
            return base.Channel.GetSingleUserAsync(user);
        }
        
        public int test(int a) {
            return base.Channel.test(a);
        }
        
        public System.Threading.Tasks.Task<int> testAsync(int a) {
            return base.Channel.testAsync(a);
        }
    }
}
